{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1CnIOaxeBv-le98nzAPW-mZANouEsnOEz","timestamp":1710841385508},{"file_id":"1puIawqEcTD_XEcB-xUz---5wM98d0L3T","timestamp":1703024064992}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"snxSUWXD7q_p"},"source":["## Домашнее задание по неделе 4"]},{"cell_type":"markdown","metadata":{"id":"j-8OLsAV7wrQ"},"source":["Как было рассказано на лекции, стохастический градиентый спуск сходится быстрее, чем полный, хотя и менее стабильно. В этом задании вам предлагается реализовать стохастический градиентный спуск и сравнить его с точным вычислением весов линейной модели по скорости работы и значению метрики качества."]},{"cell_type":"code","metadata":{"id":"IgQyWw5o7Nej","executionInfo":{"status":"ok","timestamp":1710842247695,"user_tz":-180,"elapsed":2,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}}},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import warnings\n","\n","np.random.seed(0)\n","\n","warnings.filterwarnings('ignore')\n","%matplotlib inline"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bGD1wQgMruJw"},"source":["### Задание 0\n","\n","Реализуйте класс ```LinearRegressionSGD``` c обучением и и применением линейной регрессии, построенной с помощью стохастического градиентного спуска, с заданным интерфейсом."]},{"cell_type":"code","metadata":{"id":"QZxdV27R9-uc","executionInfo":{"status":"ok","timestamp":1710843724042,"user_tz":-180,"elapsed":269,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}}},"source":["import random\n","from sklearn.base import BaseEstimator\n","\n","class LinearRegressionSGD(BaseEstimator):\n","    def __init__(self, epsilon=1e-4, max_steps=100, w0=None, alpha=1e-4):\n","        \"\"\"\n","        epsilon: разница для нормы изменения весов\n","        max_steps: максимальное количество шагов в градиентном спуске\n","        w0: np.array (d,) - начальные веса\n","        alpha: шаг обучения\n","        \"\"\"\n","        self.epsilon = epsilon\n","        self.max_steps = max_steps\n","        self.w0 = w0\n","        self.alpha = alpha\n","        self.w = None\n","        self.w_history = []\n","\n","    def fit(self, X, y):\n","        \"\"\"\n","        X: np.array (l, d)\n","        y: np.array (l)\n","        ---\n","        output: self\n","        \"\"\"\n","        ## На каждом шаге градиентного спуска веса необходимо добавлять в w_history\n","        l, d = X.shape\n","\n","        if self.w0 is None:\n","          self.w0 = np.zeros(d)\n","\n","        self.w = self.w0\n","\n","        for step in range(self.max_steps):\n","          self.w_history.append(self.w)\n","\n","          random.seed(1)\n","          random_observation_index = random.randint(1, l-1)\n","\n","          w_new = self.w - self.alpha * self.calc_gradient(X.iloc[random_observation_index], y.iloc[random_observation_index])\n","\n","\n","          if (np.linalg.norm(w_new - self.w) < self.epsilon):\n","            break\n","\n","          self.w = w_new\n","\n","        return self\n","\n","\n","    def predict(self, X):\n","        \"\"\"\n","        X: np.array (l, d)\n","        ---\n","        output: np.array (l)\n","        \"\"\"\n","        if self.w is None:\n","            raise Exception('Not trained yet')\n","\n","        y_pred = np.dot(X, self.w)\n","\n","        return y_pred\n","\n","    def calc_gradient(self, X, y):\n","        \"\"\"\n","        X: np.array (l, d)\n","        y: np.array (l)\n","        ---\n","        output: np.array (d)\n","        \"\"\"\n","\n","        gradient = (2/1) * np.dot(X.T,(np.dot(X, self.w) - y))\n","\n","        return gradient"],"execution_count":69,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SNOm9-bXpdT3"},"source":["Проверять работу мы будем на имеющемся в sklearn наборе данных.\n","Возьмем стандартный [датасет](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html) со стоимостью жилья в различных районах Калифорнии в 1990 году.  Датасет содержит информацию о средних ценах на жилье в районе и какие-то параметры района: средний возраст домов, среднее число комнат, население"]},{"cell_type":"code","metadata":{"id":"c24JCwes9-pe","executionInfo":{"status":"ok","timestamp":1710843635121,"user_tz":-180,"elapsed":3,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}}},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.datasets import fetch_california_housing\n","data = fetch_california_housing(as_frame=True)\n","X = pd.DataFrame(data.data, columns=data.feature_names)\n","y = data.target\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)"],"execution_count":65,"outputs":[]},{"cell_type":"code","source":["X_train.head()"],"metadata":{"id":"5R-G_B8HJMtn","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1710843635572,"user_tz":-180,"elapsed":4,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}},"outputId":"c6fb902e-a02a-43a1-bca1-15c131d233d5"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n","17853  5.3994      23.0  5.019157   1.022989       910.0  3.486590     37.44   \n","15963  3.9567      52.0  5.173664   1.127863      1848.0  3.526718     37.71   \n","20106  3.0500      17.0  5.383764   1.095941       753.0  2.778598     37.94   \n","15525  2.2500      16.0  4.331113   1.109420      2737.0  2.604186     33.14   \n","5234   2.0187      39.0  4.876068   1.102564      1313.0  5.611111     33.94   \n","\n","       Longitude  \n","17853    -121.88  \n","15963    -122.44  \n","20106    -120.29  \n","15525    -117.05  \n","5234     -118.23  "],"text/html":["\n","  <div id=\"df-60e43531-1e1a-4d37-9b6e-bf81049e0e79\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MedInc</th>\n","      <th>HouseAge</th>\n","      <th>AveRooms</th>\n","      <th>AveBedrms</th>\n","      <th>Population</th>\n","      <th>AveOccup</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>17853</th>\n","      <td>5.3994</td>\n","      <td>23.0</td>\n","      <td>5.019157</td>\n","      <td>1.022989</td>\n","      <td>910.0</td>\n","      <td>3.486590</td>\n","      <td>37.44</td>\n","      <td>-121.88</td>\n","    </tr>\n","    <tr>\n","      <th>15963</th>\n","      <td>3.9567</td>\n","      <td>52.0</td>\n","      <td>5.173664</td>\n","      <td>1.127863</td>\n","      <td>1848.0</td>\n","      <td>3.526718</td>\n","      <td>37.71</td>\n","      <td>-122.44</td>\n","    </tr>\n","    <tr>\n","      <th>20106</th>\n","      <td>3.0500</td>\n","      <td>17.0</td>\n","      <td>5.383764</td>\n","      <td>1.095941</td>\n","      <td>753.0</td>\n","      <td>2.778598</td>\n","      <td>37.94</td>\n","      <td>-120.29</td>\n","    </tr>\n","    <tr>\n","      <th>15525</th>\n","      <td>2.2500</td>\n","      <td>16.0</td>\n","      <td>4.331113</td>\n","      <td>1.109420</td>\n","      <td>2737.0</td>\n","      <td>2.604186</td>\n","      <td>33.14</td>\n","      <td>-117.05</td>\n","    </tr>\n","    <tr>\n","      <th>5234</th>\n","      <td>2.0187</td>\n","      <td>39.0</td>\n","      <td>4.876068</td>\n","      <td>1.102564</td>\n","      <td>1313.0</td>\n","      <td>5.611111</td>\n","      <td>33.94</td>\n","      <td>-118.23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60e43531-1e1a-4d37-9b6e-bf81049e0e79')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-60e43531-1e1a-4d37-9b6e-bf81049e0e79 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-60e43531-1e1a-4d37-9b6e-bf81049e0e79');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-53805153-3885-4632-9d00-3e01596b8eeb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53805153-3885-4632-9d00-3e01596b8eeb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-53805153-3885-4632-9d00-3e01596b8eeb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 14448,\n  \"fields\": [\n    {\n      \"column\": \"MedInc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8899467339412968,\n        \"min\": 0.4999,\n        \"max\": 15.0001,\n        \"num_unique_values\": 9807,\n        \"samples\": [\n          2.5434,\n          5.9878,\n          4.9643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HouseAge\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.621999661061475,\n        \"min\": 1.0,\n        \"max\": 52.0,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          29.0,\n          28.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AveRooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.452169042453188,\n        \"min\": 0.8461538461538461,\n        \"max\": 141.9090909090909,\n        \"num_unique_values\": 13821,\n        \"samples\": [\n          2.8390750353940537,\n          5.132553606237817,\n          4.888888888888889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AveBedrms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4434060603276987,\n        \"min\": 0.3333333333333333,\n        \"max\": 25.636363636363637,\n        \"num_unique_values\": 10753,\n        \"samples\": [\n          1.1029411764705883,\n          1.1130284728213977,\n          0.9798994974874372\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1136.5597695437702,\n        \"min\": 8.0,\n        \"max\": 35682.0,\n        \"num_unique_values\": 3501,\n        \"samples\": [\n          2744.0,\n          1557.0,\n          2380.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AveOccup\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.85999719283998,\n        \"min\": 0.6923076923076923,\n        \"max\": 599.7142857142857,\n        \"num_unique_values\": 13471,\n        \"samples\": [\n          2.8608247422680413,\n          2.944130925507901,\n          2.366822429906542\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.142316550313555,\n        \"min\": 32.54,\n        \"max\": 41.95,\n        \"num_unique_values\": 823,\n        \"samples\": [\n          40.88,\n          33.17,\n          36.59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0058522718340255,\n        \"min\": -124.35,\n        \"max\": -114.47,\n        \"num_unique_values\": 818,\n        \"samples\": [\n          -117.07,\n          -121.61,\n          -123.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","metadata":{"id":"9eIJwWnInXnr"},"source":["### Задание 1\n","\n","Метрикой качества в нашей задаче будет MAPE - Mean Absolute Percentage Error. Реализуйте её с заданным интефейсом и вычислите\n","```MAPE(y_test, y_0)```, где ```y_0 = (mean(y_test), mean(y_test), ...)```"]},{"cell_type":"code","metadata":{"id":"znoDavxyuLsi","executionInfo":{"status":"ok","timestamp":1710843971702,"user_tz":-180,"elapsed":362,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}}},"source":["def MAPE(y_true, y_pred):\n","    \"\"\"\n","        y_true: np.array (l)\n","        y_pred: np.array (l)\n","        ---\n","        output: float [0, +inf)\n","    \"\"\"\n","    return abs((y_true - y_pred)/y_true).mean()"],"execution_count":76,"outputs":[]},{"cell_type":"code","metadata":{"id":"e6mTAykeojwp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710844761843,"user_tz":-180,"elapsed":687,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}},"outputId":"fb9e99b2-83b6-4222-e42c-40840a99a6a2"},"source":["from sklearn.metrics import mean_absolute_percentage_error\n","\n","# lrv = LinearRegressionSGD()\n","# lrv.fit(X_train, y_train)\n","# y_0 = lrv.predict(X_test)\n","y_0 = y_test.apply(lambda x: y_test.mean())\n","\n","print(mean_absolute_percentage_error(y_test, y_0))\n","\n","MAPE(y_test, y_0)"],"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6221208474820479\n"]},{"output_type":"execute_result","data":{"text/plain":["0.6221208474820479"]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","metadata":{"id":"2nNy2ITxuMKf"},"source":["### Задание 2\n","\n","Обучите ```LinearRegressionSGD``` с базовыми параметрами на тренировочном наборе данных (```X_train```, ```y_train```), сделайте предсказание на тестовых данных ```X_test```, записав результат в переменную ```y_pred_sgd```  и вычислите ошибку MAPE."]},{"cell_type":"code","metadata":{"id":"7BIHwAwUvB-N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710844014113,"user_tz":-180,"elapsed":265,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}},"outputId":"19d3a657-b81d-4dc1-f27e-b9e9b4a1f4aa"},"source":["sgd = LinearRegressionSGD()\n","sgd.fit(X_train, y_train)\n","y_pred_sgd = sgd.predict(X_test)\n","\n","MAPE(y_test, y_pred_sgd)"],"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.6537558525481014e+285"]},"metadata":{},"execution_count":78}]},{"cell_type":"markdown","source":[],"metadata":{"id":"6-NPlavYPQpy"}},{"cell_type":"markdown","metadata":{"id":"lWappMdMtIPV"},"source":["### Задание 3\n","\n","Вычислите веса по точной формуле, используя ```X_train``` и ```y_train```; предскажите с их помощью целевую переменную на ```X_test```, записав результат в переменную ```y_pred_lr``` и вычислите ошибку MAPE."]},{"cell_type":"code","metadata":{"id":"wjMUlPje9-k0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710844649067,"user_tz":-180,"elapsed":7,"user":{"displayName":"Denis Todorov","userId":"08077798441066560770"}},"outputId":"7a4ce25e-4639-42b6-e49d-407b5be2e189"},"source":["X_train_augmented = np.column_stack((np.ones(len(X_train)), X_train))\n","w = np.linalg.inv(X_train_augmented.T.dot(X_train_augmented)).dot(X_train_augmented.T).dot(y_train)\n","\n","X_test_augmented = np.column_stack((np.ones(len(X_test)), X_test))\n","y_pred_lr = X_test_augmented.dot(w)\n","\n","MAPE(y_test, y_pred_lr)"],"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.31758468655243516"]},"metadata":{},"execution_count":82}]},{"cell_type":"markdown","metadata":{"id":"yL9L-4cwxZho"},"source":["## Бонусное задание по неделе 4"]},{"cell_type":"markdown","metadata":{"id":"CZFaUn7yx04u"},"source":["До этого вы релизовывали модели, в которых не было штрафа за величину весов ```w```. Как было рассказано ранее в лекциях, это может привести к неустойчивости модели и переобучению. Чтобы избежать этих эффектов, предлагается добавить к оптимизируемому функционалу L2-норму весов; таким образом, будем решать задачу гребневой регрессии, Ridge:\n","\n","$$ \\frac{1}{l}(Xw-y)^T(Xw-y) +\\gamma||w||_2 \\rightarrow \\min_{w}. $$\n","\n","### Задание 11\n","Реализуйте обучение такой модели в матричном виде (смотрите дополнительные материалы к этой неделе) с помощью стохастического градиентного спуска. Класс должен совпадать по набору реализованных функций с ```LinearRegressionVectorized```, разница будет лишь в параметре $\\gamma$, отвечающем за степень регуляризации."]},{"cell_type":"code","metadata":{"id":"TEXqBqmGxWDz"},"source":["class RidgeSGD(BaseEstimator):\n","    def __init__(self, epsilon=1e-4, max_steps=1000, w0=None, alpha=1e-2, gamma=0):\n","        \"\"\"\n","        epsilon: разница для нормы изменения весов\n","        max_steps: максимальное количество шагов в градиентном спуске\n","        w0: np.array (d,) - начальные веса\n","        alpha: шаг обучения\n","        gamma: коэффициент регуляризации\n","        \"\"\"\n","        self.epsilon = epsilon\n","        self.max_steps = max_steps\n","        self.w0 = w0\n","        self.alpha = alpha\n","        self.gamma = gamma\n","        self.w = None\n","        self.w_history = []\n","\n","    def fit(self, X, y):\n","        \"\"\"\n","        X: np.array (l, d)\n","        y: np.array (l)\n","        ---\n","        output: self\n","        \"\"\"\n","        return self\n","\n","    def predict(self, X):\n","        \"\"\"\n","        X: np.array (l, d)\n","        ---\n","        output: np.array (l)\n","        \"\"\"\n","        pass\n","\n","\n","    def calc_gradient(self, X, y):\n","        \"\"\"\n","        X: np.array (l, d)\n","        y: np.array (l)\n","        ---\n","        output: np.array (d)\n","        \"\"\"\n","        pass"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6t9rqXFu8Pq6"},"source":["Так же, как и в основном задании, обучите модель с базовыми параметрами на тренировочных данных и сделайте прогноз y_pred_ridge. Выведите значение MAPE(y_test, y_pred_ridge)."]},{"cell_type":"code","metadata":{"id":"6A2hak_A8QPO"},"source":[],"execution_count":null,"outputs":[]}]}